import asyncio
import json
import sqlite3
import uuid
import subprocess
from datetime import datetime, timedelta
from typing import Optional, List, Tuple, Dict, Any
from functools import wraps

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
BOT_TOKEN = "7900977069:AAGGHgnf9GPFqQjCVyffs9uCw1Cu4oySXiI"
ADMIN_ID = 1991552751

XRAY_CONFIG = "/usr/local/etc/xray/config.json"

# VLESS Reality (—Ç–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
SERVER_ADDR = "185.58.115.221"
PORT = 443
SNI = "www.cloudflare.com"
PUBLIC_KEY = "GNligj6Ji9XELMMgOQFN-3-IBdDWJShDmY_44CpIeX0"   # pbk
SHORT_ID = "345945fbd4038bf2"                            # sid
FLOW = "xtls-rprx-vision"
TRANSPORT = "tcp"

SUPPORT_TEXT = (
    "<b>üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
    "–ü–∏—à–∏ –≤ –ª–∏—á–∫—É: <a href='https://t.me/moloko113'>@moloko113</a>\n"
)
HOWTO_TEXT = (
    "<b>‚ÑπÔ∏è –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</b>\n"
    "1) –£—Å—Ç–∞–Ω–æ–≤–∏ –∫–ª–∏–µ–Ω—Ç:\n"
    "   ‚Ä¢ Android ‚Äî v2rayNG\n"
    "   ‚Ä¢ Windows ‚Äî v2rayN\n"
    "   ‚Ä¢ iOS ‚Äî Shadowrocket\n"
    "2) –ù–∞–∂–º–∏ ¬´üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥¬ª ‚Äî –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.\n"
    "3) –í –∫–ª–∏–µ–Ω—Ç–µ –≤—ã–±–µ—Ä–∏ ¬´–ò–º–ø–æ—Ä—Ç –ø–æ —Å—Å—ã–ª–∫–µ/URI¬ª, –≤—Å—Ç–∞–≤—å –µ—ë.\n"
    "4) –í–∫–ª—é—á–∏ VPN –∏ –ø—Ä–æ–≤–µ—Ä—å —Ä–∞–±–æ—Ç—É.\n"
)

# =========================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =========================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# =========================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =========================
# check_same_thread=False ‚Äî —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
conn = sqlite3.connect("users.db", check_same_thread=False)
cur = conn.cursor()

# users.approved: 0 (–æ–∂–∏–¥–∞–µ—Ç), 1 (–æ–¥–æ–±—Ä–µ–Ω), -1 (–æ—Ç–∫–ª–æ–Ω—ë–Ω)
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    approved INTEGER NOT NULL DEFAULT 0
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS configs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    uuid TEXT NOT NULL,
    expires_at TEXT NOT NULL,
    is_trial INTEGER NOT NULL DEFAULT 0,
    created_by_admin INTEGER NOT NULL DEFAULT 0,
    created_at TEXT NOT NULL,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
""")
conn.commit()

# –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–µ–π—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∞
ADMIN_PENDING: Dict[int, Dict[str, Any]] = {}

# =========================
# UI ‚Äî –∫—Ä–∞—Å–∏–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# =========================
def user_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ† –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="user_create")],
        [InlineKeyboardButton(text="üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ç—å VPN (3 –¥–Ω—è)", callback_data="user_trial")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="user_howto")],
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="user_support")]
    ])

def admin_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìú –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", callback_data="admin_list")
        ],
        [
            InlineKeyboardButton(text="‚è´ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_extend"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_delete")
        ],
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –¥–æ–ø. –∫–æ–Ω—Ñ–∏–≥", callback_data="admin_create_extra")
        ]
    ])

def approval_kb(for_user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{for_user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{for_user_id}")
        ]
    ])

# =========================
# XRAY HELPERS
# =========================
def get_reality_inbound(config: dict):
    for inbound in config.get("inbounds", []):
        if inbound.get("protocol") != "vless":
            continue
        st = inbound.get("streamSettings", {})
        if st.get("security") == "reality":
            return inbound
    return None

def xray_restart():
    # –ø–æ –∂–µ–ª–∞–Ω–∏—é: subprocess.run(["xray", "run", "-test", "-config", XRAY_CONFIG])
    subprocess.run(["systemctl", "restart", "xray"])

def add_uuid_to_xray(user_uuid: str):
    with open(XRAY_CONFIG, "r") as f:
        cfg = json.load(f)
    inbound = get_reality_inbound(cfg)
    if not inbound:
        raise RuntimeError("Reality inbound –Ω–µ –Ω–∞–π–¥–µ–Ω")
    clients = inbound.setdefault("settings", {}).setdefault("clients", [])
    if not any(c.get("id") == user_uuid for c in clients):
        clients.append({"id": user_uuid, "flow": FLOW})
    with open(XRAY_CONFIG, "w") as f:
        json.dump(cfg, f, indent=2)
    xray_restart()

def remove_uuid_from_xray(user_uuid: str):
    with open(XRAY_CONFIG, "r") as f:
        cfg = json.load(f)
    inbound = get_reality_inbound(cfg)
    if not inbound:
        return
    clients = inbound.get("settings", {}).get("clients", [])
    inbound["settings"]["clients"] = [c for c in clients if c.get("id") != user_uuid]
    with open(XRAY_CONFIG, "w") as f:
        json.dump(cfg, f, indent=2)
    xray_restart()

def build_vless_link(user_uuid: str) -> str:
    return (
        f"vless://{user_uuid}@{SERVER_ADDR}:{PORT}"
        f"?encryption=none&flow={FLOW}&security=reality"
        f"&sni={SNI}&fp=chrome&pbk={PUBLIC_KEY}&sid={SHORT_ID}"
        f"&type={TRANSPORT}#VPN"
    )

# =========================
# DB HELPERS
# =========================
def ensure_user_row(user_id: int):
    cur.execute("INSERT OR IGNORE INTO users(user_id) VALUES(?)", (user_id,))
    conn.commit()

def set_approved(user_id: int, approved: int):
    cur.execute("INSERT OR REPLACE INTO users(user_id, approved) VALUES(?, ?)", (user_id, approved))
    conn.commit()

def is_approved(user_id: int) -> int:
    cur.execute("SELECT approved FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    return int(row[0]) if row else 0

def get_active_user_configs(user_id: int) -> List[Tuple]:
    now = datetime.now().isoformat()
    cur.execute("""SELECT id, uuid, expires_at, is_trial, created_by_admin, created_at
                   FROM configs WHERE user_id=? AND expires_at > ?
                   ORDER BY id DESC""", (user_id, now))
    return cur.fetchall()

def get_all_configs(limit=50) -> List[Tuple]:
    cur.execute("""SELECT id, user_id, uuid, expires_at, is_trial, created_by_admin, created_at
                   FROM configs ORDER BY id DESC LIMIT ?""", (limit,))
    return cur.fetchall()

def create_config_record(user_id: int, user_uuid: str, days: int, is_trial=False, created_by_admin=False):
    expires_at = (datetime.now() + timedelta(days=days)).isoformat()
    cur.execute("""INSERT INTO configs(user_id, uuid, expires_at, is_trial, created_by_admin, created_at)
                   VALUES(?, ?, ?, ?, ?, ?)""",
                (user_id, user_uuid, expires_at, int(is_trial), int(created_by_admin), datetime.now().isoformat()))
    conn.commit()

def delete_config_record(config_id: int) -> Optional[str]:
    cur.execute("SELECT uuid FROM configs WHERE id=?", (config_id,))
    row = cur.fetchone()
    if not row:
        return None
    uuid_val = row[0]
    cur.execute("DELETE FROM configs WHERE id=?", (config_id,))
    conn.commit()
    return uuid_val

def extend_config_record(config_id: int, add_days: int) -> Optional[str]:
    cur.execute("SELECT expires_at FROM configs WHERE id=?", (config_id,))
    row = cur.fetchone()
    if not row:
        return None
    expires_at = row[0]
    new_exp = (datetime.fromisoformat(expires_at) + timedelta(days=add_days)).isoformat()
    cur.execute("UPDATE configs SET expires_at=? WHERE id=?", (new_exp, config_id))
    conn.commit()
    return new_exp

# =========================
# DECORATOR ‚Äî –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º
# =========================
def require_approved(func):
    @wraps(func)
    async def wrapper(cb: CallbackQuery, **data):
        if is_approved(cb.from_user.id) != 1:
            await cb.answer()
            await cb.message.answer("‚è≥ –î–æ—Å—Ç—É–ø –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω. –ü–æ–¥–æ–∂–¥–∏ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞.")
            return
        return await func(cb)
    return wrapper

# =========================
# –Æ–ó–ï–†: /start –∏ –º–µ–Ω—é
# =========================
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    ensure_user_row(message.from_user.id)
    appr = is_approved(message.from_user.id)

    title = "<b>üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN-–±–æ—Ç</b>\n"
    if appr == 1:
        await message.answer(
            f"{title}–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
            reply_markup=user_menu()
        )
        return
    elif appr == -1:
        await message.answer(f"{title}‚ùå –¢–µ–±–µ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
        return

    # –ï—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É
    uname = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    await bot.send_message(
        ADMIN_ID,
        f"<b>üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uname}\n"
        f"ID: <code>{message.from_user.id}</code>",
        reply_markup=approval_kb(message.from_user.id)
    )
    await message.answer(
        f"{title}‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è."
    )

@dp.callback_query(F.data.startswith("approve_"))
async def approve_user(cb: CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        return
    uid = int(cb.data.split("_")[1])
    set_approved(uid, 1)
    await cb.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{uid}</code> –æ–¥–æ–±—Ä–µ–Ω")
    try:
        await bot.send_message(uid, "‚úÖ –î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω. –û—Ç–∫—Ä–æ–π –º–µ–Ω—é:", reply_markup=user_menu())
    except:
        pass

@dp.callback_query(F.data.startswith("decline_"))
async def decline_user(cb: CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        return
    uid = int(cb.data.split("_")[1])
    set_approved(uid, -1)
    await cb.message.edit_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{uid}</code> –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    try:
        await bot.send_message(uid, "‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø.")
    except:
        pass

# =========================
# –Æ–ó–ï–†: –∫–æ–ª–ª–±—ç–∫–∏
# =========================
@dp.callback_query(F.data == "user_support")
@require_approved
async def cb_user_support(cb: CallbackQuery):
    await cb.answer()
    await cb.message.answer(SUPPORT_TEXT, disable_web_page_preview=True)

@dp.callback_query(F.data == "user_howto")
@require_approved
async def cb_user_howto(cb: CallbackQuery):
    await cb.answer()
    await cb.message.answer(HOWTO_TEXT)

@dp.callback_query(F.data == "user_create")
@require_approved
async def cb_user_create(cb: CallbackQuery):
    await cb.answer()
    uid = cb.from_user.id

    # –û–¥–∏–Ω –æ–±—ã—á–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —é–∑–µ—Ä–∞ (–∞–¥–º–∏–Ω ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    active = get_active_user_configs(uid)
    has_regular = any(row[3] == 0 for row in active)  # is_trial == 0
    if has_regular and uid != ADMIN_ID:
        await cb.message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥. –ë–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–ª—å–∑—è.")
        return

    user_uuid = str(uuid.uuid4())
    try:
        add_uuid_to_xray(user_uuid)
        create_config_record(uid, user_uuid, days=30, is_trial=False, created_by_admin=(uid == ADMIN_ID))
    except Exception as e:
        await cb.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: <code>{e}</code>")
        return

    link = build_vless_link(user_uuid)
    await cb.message.answer(
        "<b>‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π</b>\n"
        "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{link}</code>"
    )

@dp.callback_query(F.data == "user_trial")
@require_approved
async def cb_user_trial(cb: CallbackQuery):
    await cb.answer()
    uid = cb.from_user.id

    active = get_active_user_configs(uid)
    has_regular = any(row[3] == 0 for row in active)
    if has_regular:
        await cb.message.answer("‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥.")
        return

    has_trial = any(row[3] == 1 for row in active)
    if has_trial:
        await cb.message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø.")
        return

    user_uuid = str(uuid.uuid4())
    try:
        add_uuid_to_xray(user_uuid)
        create_config_record(uid, user_uuid, days=3, is_trial=True, created_by_admin=False)
    except Exception as e:
        await cb.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞: <code>{e}</code>")
        return

    link = build_vless_link(user_uuid)
    await cb.message.answer(
        "<b>üß™ –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n"
        "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        f"<code>{link}</code>"
    )

# =========================
# –ê–î–ú–ò–ù: –ø–∞–Ω–µ–ª—å –∏ –¥–∏–∞–ª–æ–≥–∏
# =========================
def reset_admin_state():
    ADMIN_PENDING.pop(ADMIN_ID, None)

@dp.message(F.text == "/admin")
async def admin_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    reset_admin_state()
    await message.answer(
        "<b>‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_menu()
    )

@dp.callback_query(F.data == "admin_list")
async def cb_admin_list(cb: CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        return
    rows = get_all_configs(50)
    if not rows:
        await cb.message.answer("üì≠ –ü–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ—Ç.")
        return
    now = datetime.now()
    lines = []
    for cid, uid, uuid_val, exp, is_trial, cba, created_at in rows:
        status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if datetime.fromisoformat(exp) > now else "‚åõ –∏—Å—Ç—ë–∫"
        tag = "TRIAL" if is_trial else "REG"
        lines.append(
            f"#{cid} ‚Ä¢ uid:{uid} ‚Ä¢ {tag} ‚Ä¢ –¥–æ {exp} ‚Ä¢ {status}\n"
            f"<code>{uuid_val}</code>"
        )
    await cb.message.answer("<b>üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–æ 50)</b>\n\n" + "\n\n".join(lines))

@dp.callback_query(F.data == "admin_extend")
async def cb_admin_extend(cb: CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        return
    ADMIN_PENDING[ADMIN_ID] = {"action": "extend", "step": 1}
    await cb.message.answer("‚è´ –í–≤–µ–¥–∏—Ç–µ <b>ID –∫–æ–Ω—Ñ–∏–≥–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å:")

@dp.callback_query(F.data == "admin_delete")
async def cb_admin_delete(cb: CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        return
    ADMIN_PENDING[ADMIN_ID] = {"action": "delete", "step": 1}
    await cb.message.answer("üóë –í–≤–µ–¥–∏—Ç–µ <b>ID –∫–æ–Ω—Ñ–∏–≥–∞</b>, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@dp.callback_query(F.data == "admin_create_extra")
async def cb_admin_create_extra(cb: CallbackQuery):
    await cb.answer()
    if cb.from_user.id != ADMIN_ID:
        return
    ADMIN_PENDING[ADMIN_ID] = {"action": "create_extra", "step": 1}
    await cb.message.answer("‚ûï –£–∫–∞–∂–∏—Ç–µ <b>USER_ID</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø. –∫–æ–Ω—Ñ–∏–≥:")

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∞ + –∫–æ–º–∞–Ω–¥–∞ /send
@dp.message()
async def admin_dialogs_and_broadcast(message: Message):
    # --- —Ä–∞—Å—Å—ã–ª–∫–∞ ---
    if message.from_user.id == ADMIN_ID and message.text and message.text.startswith("/send"):
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/send –¢–ï–ö–°–¢</code>")
            return
        text = parts[1]
        cur.execute("SELECT user_id FROM users WHERE approved=1")
        rows = cur.fetchall()
        sent, failed = 0, 0
        for (uid,) in rows:
            try:
                await bot.send_message(uid, f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n{text}")
                sent += 1
                await asyncio.sleep(0.03)  # –º—è–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥
            except Exception:
                failed += 1
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}")
        return

    # --- –¥–∏–∞–ª–æ–≥–∏ –∞–¥–º–∏–Ω–∞ ---
    if message.from_user.id != ADMIN_ID:
        return
    if ADMIN_PENDING.get(ADMIN_ID) is None:
        return

    state = ADMIN_PENDING[ADMIN_ID]
    action = state.get("action")
    step = state.get("step", 0)

    # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
    if action == "delete":
        if step == 1:
            try:
                cid = int(message.text.strip())
            except:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π <b>ID</b> (—á–∏—Å–ª–æ).")
                return
            uuid_val = delete_config_record(cid)
            if not uuid_val:
                reset_admin_state()
                await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω CONFIG_ID.")
                return
            try:
                remove_uuid_from_xray(uuid_val)
                await message.answer(f"üóë –ö–æ–Ω—Ñ–∏–≥ <b>#{cid}</b> —É–¥–∞–ª—ë–Ω –∏ –æ—Ç–∫–ª—é—á—ë–Ω.")
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: <code>{e}</code>")
            reset_admin_state()
            return

    # –ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥
    if action == "extend":
        if step == 1:
            try:
                cid = int(message.text.strip())
            except:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π <b>ID</b> (—á–∏—Å–ª–æ).")
                return
            state["config_id"] = cid
            state["step"] = 2
            await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
            return
        if step == 2:
            try:
                add_days = int(message.text.strip())
            except:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
                return
            cid = state.get("config_id")
            new_exp = extend_config_record(cid, add_days)
            reset_admin_state()
            if not new_exp:
                await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω CONFIG_ID.")
                return
            await message.answer(f"‚è´ –ö–æ–Ω—Ñ–∏–≥ <b>#{cid}</b> –ø—Ä–æ–¥–ª—ë–Ω –¥–æ <code>{new_exp}</code>.")
            return

    # –°–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    if action == "create_extra":
        if step == 1:
            try:
                tgt = int(message.text.strip())
            except:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π <b>USER_ID</b> (—á–∏—Å–ª–æ).")
                return
            state["user_id"] = tgt
            state["step"] = 2
            await message.answer("–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø. –∫–æ–Ω—Ñ–∏–≥? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):")
            return
        if step == 2:
            try:
                days = int(message.text.strip())
            except:
                await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
                return
            tgt = state.get("user_id")
            reset_admin_state()

            user_uuid = str(uuid.uuid4())
            try:
                cur.execute("INSERT OR IGNORE INTO users(user_id) VALUES(?)", (tgt,))
                conn.commit()
                add_uuid_to_xray(user_uuid)
                create_config_record(tgt, user_uuid, days=days, is_trial=False, created_by_admin=True)
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <code>{e}</code>")
                return

            link = build_vless_link(user_uuid)
            await message.answer(
                f"‚ûï –î–æ–ø. –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è <b>{tgt}</b> –Ω–∞ <b>{days}</b> –¥–Ω. —Å–æ–∑–¥–∞–Ω:\n<code>{link}</code>"
            )
            try:
                await bot.send_message(
                    tgt,
                    f"üëã –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–ª –¥–ª—è —Ç–µ–±—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ {days} –¥–Ω.:\n<code>{link}</code>"
                )
            except:
                pass
            return

# =========================
# –ö–†–û–ù: –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç—ë–∫—à–∏—Ö
# =========================
async def check_expired_loop():
    while True:
        now = datetime.now()
        try:
            cur.execute("SELECT id, user_id, uuid, expires_at FROM configs")
            for cid, uid, uuid_val, exp in cur.fetchall():
                try:
                    if datetime.fromisoformat(exp) <= now:
                        remove_uuid_from_xray(uuid_val)
                        cur.execute("DELETE FROM configs WHERE id=?", (cid,))
                        conn.commit()
                        try:
                            await bot.send_message(uid, "‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏—Å—Ç—ë–∫. –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª—é—á—ë–Ω.")
                        except:
                            pass
                except Exception as e:
                    print("expire-check item error:", e)
        except Exception as e:
            print("expire-check cycle error:", e)

        await asyncio.sleep(3600)  # —Ä–∞–∑ –≤ —á–∞—Å

# =========================
# MAIN
# =========================
async def main():
    asyncio.create_task(check_expired_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())